/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: proto/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./..\\google\\protobuf\\empty";
import * as dependency_2 from "./..\\google\\protobuf\\timestamp";
import * as dependency_3 from "./base";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace pb {
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            created_at?: dependency_2.google.protobuf.Timestamp;
            updated_at?: dependency_2.google.protobuf.Timestamp;
            deleted_at?: dependency_2.google.protobuf.Timestamp;
            username?: string;
            nickname?: string;
            info?: UserInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("deleted_at" in data && data.deleted_at != undefined) {
                    this.deleted_at = data.deleted_at;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("nickname" in data && data.nickname != undefined) {
                    this.nickname = data.nickname;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get created_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 90) as dependency_2.google.protobuf.Timestamp;
        }
        set created_at(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 90, value);
        }
        get has_created_at() {
            return pb_1.Message.getField(this, 90) != null;
        }
        get updated_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 91) as dependency_2.google.protobuf.Timestamp;
        }
        set updated_at(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 91, value);
        }
        get has_updated_at() {
            return pb_1.Message.getField(this, 91) != null;
        }
        get deleted_at() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 100) as dependency_2.google.protobuf.Timestamp;
        }
        set deleted_at(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 100, value);
        }
        get has_deleted_at() {
            return pb_1.Message.getField(this, 100) != null;
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get nickname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set nickname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get info() {
            return pb_1.Message.getWrapperField(this, UserInfo, 4) as UserInfo;
        }
        set info(value: UserInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: number;
            created_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            updated_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            deleted_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            username?: string;
            nickname?: string;
            info?: ReturnType<typeof UserInfo.prototype.toObject>;
        }): User {
            const message = new User({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.created_at != null) {
                message.created_at = dependency_2.google.protobuf.Timestamp.fromObject(data.created_at);
            }
            if (data.updated_at != null) {
                message.updated_at = dependency_2.google.protobuf.Timestamp.fromObject(data.updated_at);
            }
            if (data.deleted_at != null) {
                message.deleted_at = dependency_2.google.protobuf.Timestamp.fromObject(data.deleted_at);
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.nickname != null) {
                message.nickname = data.nickname;
            }
            if (data.info != null) {
                message.info = UserInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                created_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                updated_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                deleted_at?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                username?: string;
                nickname?: string;
                info?: ReturnType<typeof UserInfo.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at.toObject();
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at.toObject();
            }
            if (this.deleted_at != null) {
                data.deleted_at = this.deleted_at.toObject();
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.nickname != null) {
                data.nickname = this.nickname;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.has_created_at)
                writer.writeMessage(90, this.created_at, () => this.created_at.serialize(writer));
            if (this.has_updated_at)
                writer.writeMessage(91, this.updated_at, () => this.updated_at.serialize(writer));
            if (this.has_deleted_at)
                writer.writeMessage(100, this.deleted_at, () => this.deleted_at.serialize(writer));
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.nickname.length)
                writer.writeString(3, this.nickname);
            if (this.has_info)
                writer.writeMessage(4, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 90:
                        reader.readMessage(message.created_at, () => message.created_at = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 91:
                        reader.readMessage(message.updated_at, () => message.updated_at = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 100:
                        reader.readMessage(message.deleted_at, () => message.deleted_at = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.nickname = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.info, () => message.info = UserInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class UserInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): UserInfo {
            const message = new UserInfo({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfo {
            return UserInfo.deserialize(bytes);
        }
    }
    export class CreateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): CreateUserRequest {
            const message = new CreateUserRequest({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
            return CreateUserRequest.deserialize(bytes);
        }
    }
    export class GetUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            view?: GetUserRequest.View;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 2, GetUserRequest.View.VIEW_UNSPECIFIED) as GetUserRequest.View;
        }
        set view(value: GetUserRequest.View) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            view?: GetUserRequest.View;
        }): GetUserRequest {
            const message = new GetUserRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.view != null) {
                message.view = data.view;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                view?: GetUserRequest.View;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.view != null) {
                data.view = this.view;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (this.view != GetUserRequest.View.VIEW_UNSPECIFIED)
                writer.writeEnum(2, this.view);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    case 2:
                        message.view = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export namespace GetUserRequest {
        export enum View {
            VIEW_UNSPECIFIED = 0,
            BASIC = 1,
            WITH_EDGE_IDS = 2
        }
    }
    export class UpdateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): UpdateUserRequest {
            const message = new UpdateUserRequest({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
            return UpdateUserRequest.deserialize(bytes);
        }
    }
    export class ListUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_list?: User[];
            next_page_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_list" in data && data.user_list != undefined) {
                    this.user_list = data.user_list;
                }
                if ("next_page_token" in data && data.next_page_token != undefined) {
                    this.next_page_token = data.next_page_token;
                }
            }
        }
        get user_list() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set user_list(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get next_page_token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set next_page_token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_list?: ReturnType<typeof User.prototype.toObject>[];
            next_page_token?: string;
        }): ListUserResponse {
            const message = new ListUserResponse({});
            if (data.user_list != null) {
                message.user_list = data.user_list.map(item => User.fromObject(item));
            }
            if (data.next_page_token != null) {
                message.next_page_token = data.next_page_token;
            }
            return message;
        }
        toObject() {
            const data: {
                user_list?: ReturnType<typeof User.prototype.toObject>[];
                next_page_token?: string;
            } = {};
            if (this.user_list != null) {
                data.user_list = this.user_list.map((item: User) => item.toObject());
            }
            if (this.next_page_token != null) {
                data.next_page_token = this.next_page_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_list.length)
                writer.writeRepeatedMessage(1, this.user_list, (item: User) => item.serialize(writer));
            if (this.next_page_token.length)
                writer.writeString(2, this.next_page_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    case 2:
                        message.next_page_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListUserResponse {
            return ListUserResponse.deserialize(bytes);
        }
    }
    export class BatchCreateUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requests?: CreateUserRequest[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requests" in data && data.requests != undefined) {
                    this.requests = data.requests;
                }
            }
        }
        get requests() {
            return pb_1.Message.getRepeatedWrapperField(this, CreateUserRequest, 1) as CreateUserRequest[];
        }
        set requests(value: CreateUserRequest[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            requests?: ReturnType<typeof CreateUserRequest.prototype.toObject>[];
        }): BatchCreateUsersRequest {
            const message = new BatchCreateUsersRequest({});
            if (data.requests != null) {
                message.requests = data.requests.map(item => CreateUserRequest.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requests?: ReturnType<typeof CreateUserRequest.prototype.toObject>[];
            } = {};
            if (this.requests != null) {
                data.requests = this.requests.map((item: CreateUserRequest) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requests.length)
                writer.writeRepeatedMessage(1, this.requests, (item: CreateUserRequest) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchCreateUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchCreateUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.requests, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CreateUserRequest.deserialize(reader), CreateUserRequest));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchCreateUsersRequest {
            return BatchCreateUsersRequest.deserialize(bytes);
        }
    }
    export class BatchCreateUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
        }): BatchCreateUsersResponse {
            const message = new BatchCreateUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchCreateUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchCreateUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchCreateUsersResponse {
            return BatchCreateUsersResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserServiceService {
        static definition = {
            Create: {
                path: "/pb.UserService/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            },
            Get: {
                path: "/pb.UserService/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/pb.UserService/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/pb.UserService/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.pb.DeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.pb.DeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            List: {
                path: "/pb.UserService/List",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.pb.ListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.pb.ListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListUserResponse.deserialize(new Uint8Array(bytes))
            },
            BatchCreate: {
                path: "/pb.UserService/BatchCreate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BatchCreateUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BatchCreateUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BatchCreateUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BatchCreateUsersResponse.deserialize(new Uint8Array(bytes))
            },
            Export: {
                path: "/pb.UserService/Export",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.pb.ListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.pb.ListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.pb.ExportResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.pb.ExportResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateUserRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
        abstract Get(call: grpc_1.ServerUnaryCall<GetUserRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateUserRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<dependency_3.pb.DeleteRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract List(call: grpc_1.ServerUnaryCall<dependency_3.pb.ListRequest, ListUserResponse>, callback: grpc_1.sendUnaryData<ListUserResponse>): void;
        abstract BatchCreate(call: grpc_1.ServerUnaryCall<BatchCreateUsersRequest, BatchCreateUsersResponse>, callback: grpc_1.sendUnaryData<BatchCreateUsersResponse>): void;
        abstract Export(call: grpc_1.ServerUnaryCall<dependency_3.pb.ListRequest, dependency_3.pb.ExportResponse>, callback: grpc_1.sendUnaryData<dependency_3.pb.ExportResponse>): void;
    }
    export class UserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserServiceService.definition, "UserService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<CreateUserRequest, User> = (message: CreateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Get: GrpcUnaryServiceInterface<GetUserRequest, User> = (message: GetUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<UpdateUserRequest, User> = (message: UpdateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<dependency_3.pb.DeleteRequest, dependency_1.google.protobuf.Empty> = (message: dependency_3.pb.DeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
        List: GrpcUnaryServiceInterface<dependency_3.pb.ListRequest, ListUserResponse> = (message: dependency_3.pb.ListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListUserResponse>, callback?: grpc_1.requestCallback<ListUserResponse>): grpc_1.ClientUnaryCall => {
            return super.List(message, metadata, options, callback);
        };
        BatchCreate: GrpcUnaryServiceInterface<BatchCreateUsersRequest, BatchCreateUsersResponse> = (message: BatchCreateUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BatchCreateUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BatchCreateUsersResponse>, callback?: grpc_1.requestCallback<BatchCreateUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.BatchCreate(message, metadata, options, callback);
        };
        Export: GrpcUnaryServiceInterface<dependency_3.pb.ListRequest, dependency_3.pb.ExportResponse> = (message: dependency_3.pb.ListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.pb.ExportResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_3.pb.ExportResponse>, callback?: grpc_1.requestCallback<dependency_3.pb.ExportResponse>): grpc_1.ClientUnaryCall => {
            return super.Export(message, metadata, options, callback);
        };
    }
}
